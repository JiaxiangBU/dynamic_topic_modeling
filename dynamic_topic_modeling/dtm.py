# AUTOGENERATED! DO NOT EDIT! File to edit: dtm.ipynb (unless otherwise specified).

__all__ = ['build_docs', 'build_dict', 'display_topic', 'document_influence_dim', 'topic_distribution',
           'visualize_topics']

# Cell
def build_docs(text):
    raw_documents = text.tolist()
    # 参考 https://blog.csdn.net/kwame211/article/details/78963517
    import jieba
    docs = [[word for word in jieba.cut(document, cut_all=True)] for document in raw_documents]
    return docs

# Cell
def build_dict(docs, no_below=5, no_above=0.9):
    # 参考 https://radimrehurek.com/gensim/auto_examples/tutorials/run_lda.html#sphx-glr-auto-examples-tutorials-run-lda-py
    from gensim.corpora import Dictionary
    # Create a dictionary representation of the documents.
    dictionary = Dictionary(docs)

    # Filter out words that occur less than 5 documents, or more than 90% of the documents.
    dictionary.filter_extremes(no_below=no_below, no_above=no_above)
    return dictionary

# Cell
# cite https://github.com/GSukr/dtmvisual
import pandas as pd
import matplotlib.pyplot as plt

def display_topic(timespans, num_topics, model, num_words = 10):

    """
    :param timespans: number od timespans/periods
    :param num_topics: number of topics
    :param model: DTM trained model
    :param num_words: number of words to display for the topicid at the time period
    :return: Dataframe with corresponding weight for each top word in each topic of each period
    """
    topicId, period, weight, word = [], [], [], []
    for t in range(timespans):
        for s in range (num_topics):
            topics = model.show_topic(topicid=s, time=t, topn=num_words)
            # num_words : int, optional
            #    DEPRECATED PARAMETER, use `topn` instead.
            for i, (word_, w) in enumerate(topics):
                topicId.append(s)
                period.append(t)
                weight.append(w)
                word.append(word_)
    return pd.DataFrame(list(zip(topicId, period, weight, word)), columns = ['topicId', 'period', 'word', 'weight'])

# Cell
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

def document_influence_dim(num_topics, model, time_seq = []):

    """
    function to compute the document influence on a topic: http://users.umiacs.umd.edu/~jbg/nips_tm_workshop/30.pdf
    :param num_topics: number of topics

    """

    doc, topicId, period, distributions=[], [], [], []
    for topic in range(num_topics):
        for t in range(len(time_seq)):
            for document in range(time_seq[t]):
                distribution = round(model.influences_time[t][document][topic], 4)
                # print(len(model.influences_time))
                # print(len(model.influences_time[0]))
                # print(len(model.influences_time[0][0]))
                # 确定好正确的顺序
                period.append(t)
                doc.append(document)
                topicId.append(topic)
                distributions.append(distribution)
    return pd.DataFrame(list(zip(doc, topicId, period, distributions)), columns=['document','topicId', 'period','distribution'])



def topic_distribution(num_topics, model, time_seq = []):

    """
    function to compute the topical distribution in a document
    :param num_topics: number of topics

    """
    doc, topicId, distributions=[], [], []
    df_dim = document_influence_dim(num_topics = num_topics, model = model, time_seq = time_seq)
    for document in range(0, sum(time_seq)):
        for topic in range(0, num_topics):
            distribution = round(model.gamma_[document][topic], 4)
            doc.append(document)
            topicId.append(topic)
            distributions.append(distribution)
    return pd.DataFrame(list(zip(doc, topicId, distributions, df_dim.period)), columns=['document','topicId', 'distribution', 'period'])



def visualize_topics(df):

    """
    function to vizualise mean topic distribution over defined periods.
    the topic distribution is defined by the average level by documents.
    :param num_topics: number of topics

    """
    fig, ax = plt.subplots(figsize=(30,10))
    df.groupby(['period', 'topicId'], sort=False).mean()['distribution'].unstack().plot(ax=ax,grid=True, linewidth =3.0, sharex=True)
    plt.ylabel("Topic Distribution", fontsize=16)
    plt.xlabel("Period", fontsize=16)
    plt.title("Topic evolution")
    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), title = "Topics", fontsize='large', labelspacing=0.6, fancybox = True)